version: 2.1

jobs:
  build-and-test:
    machine:
      image: circleci/classic:latest
      docker_layer_caching: true
    environment:
      TAG: 0.1.${CIRCLE_BUILD_NUM}
      IMAGE_NAME: my-image-name
    steps:
      - checkout
      - run:
          name: Install AWS CLI tool
          command: |
            sudo apt-get update && sudo apt-get install -y awscli
      - run:
          name: Install Docker
          command: |
            sudo apt-get install -y docker.io
            sudo systemctl start docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $DOCKERHUB_USER/$IMAGE_NAME:$TAG .
      - store_artifacts:
          path: /tmp/my-image.tar.gz
          destination: my-image
      - run:
          name: Install Python deps in a venv
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
      - run:
          command: |
            . venv/bin/activate
            python -m pytest -v tests/test_script.py

  deploy:
    docker:
      - image: circleci/python:3.6.2-stretch-browsers
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Install Python deps in a venv
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Load Docker image from artifact
          command: |
            mkdir -p /tmp/my-image
            tar xzf /tmp/my-image.tar.gz -C /tmp/my-image
            docker load -i /tmp/my-image/my-image.tar
      - run:
          name: Push Docker image to AWS ECR
          command: |
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
            docker tag $DOCKERHUB_USER/$IMAGE_NAME:$TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:$TAG
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:$TAG

workflows:
  build-test-deploy:
    jobs:
      - build-and-test



# This code is a CircleCI configuration file that defines a continuous integration/continuous 
# deployment (CI/CD) pipeline for a Python application. The pipeline consists of two jobs: 
# build-and-test and deploy.

# The build-and-test job is responsible for building a Docker image of the application, running tests 
# on it, and saving the image as an artifact. The job is defined to run on a CircleCI Classic machine 
# with Docker Layer Caching enabled. The steps involved in the job are:

# Checkout the code from the Git repository.
# Install the AWS CLI tool and Docker on the machine.
# Build a Docker image of the application using the Dockerfile in the repository and tag it with a 
# version number that includes the CircleCI build number.
# Store the Docker image as an artifact in a tar.gz file.
# Create a virtual environment and install the Python dependencies listed in requirements.txt.
# Run the tests using pytest.
# The deploy job is responsible for deploying the Docker image to an AWS 
# ECR (Elastic Container Registry) repository. The job is defined to run on a CircleCI Docker image 
# with Python 3.6.2 and a web browser. The steps involved in the job are:

# Checkout the code from the Git repository.
# Restore the Python virtual environment cache if available, to speed up the installation of  
# dependencies.
# Create a virtual environment and install the Python dependencies listed in requirements.txt
# Save the Python virtual environment cache to speed up future builds.
# Set up a remote Docker environment for pushing the Docker image to the ECR repository.
# Load the Docker image from the artifact generated in the build-and-test job.
# Authenticate with the AWS ECR repository, tag the Docker image with the appropriate ECR registry
#  path and push it to the repository.
# Finally, the build-test-deploy workflow defines the sequence of jobs to be run in the pipeline, 
# in this case, build-and-test followed by deploy.





